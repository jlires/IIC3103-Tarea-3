{"version":3,"sources":["components/ExchangeList.js","components/StockChart.js","components/StockInfo.js","components/ExchangeInfo.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["Exchange","props","state","isOpen","toggle","bind","this","setState","forceUpdate","nextProps","data","className","onClick","color","exchange_ticker","icon","faChevronDown","faChevronRight","Collapse","listed_companies","map","comp","i","key","clickAction","stockname","exchangename","React","Component","ExchangeList","Object","keys","exchanges","k","StockChart","chart","lineSeries","chartContainer","createRef","chartTooltip","createChart","document","getElementById","width","height","priceScale","scaleMargins","top","bottom","borderVisible","layout","backgroundColor","textColor","grid","vertLines","horzLines","timeScale","timeVisible","addAreaSeries","topColor","bottomColor","lineColor","lineWidth","window","addEventListener","event","resize","clientWidth","tooltip","subscribeCrosshairMove","param","time","point","x","y","style","display","dateStr","Date","toLocaleDateString","price","seriesPrices","get","innerHTML","Math","round","left","updateChart","data_price","setData","businessDay","year","month","day","ref","id","StockInfo","transactions","UNIX_timestamp","a","hour","getFullYear","getMonth","getDate","getHours","min","getMinutes","sec","getSeconds","strPad","n","String","slice","sell_data","data_sell","buy_data","data_buy","price_data","o","value","type","concat","sort","b","totalSellVolume","reduce","t","volume","totalBuyVolume","maxPrice","max","minPrice","currentPrice","length","previousPrice","variation","toFixed","Row","Col","xs","md","lg","timeConverter","ExchangeInfo","exchangeData","name","address","country","buyVolume","sellVolume","marketShare","App","stocks","stockShow","connected","stockShowing","exchangeShowing","exchangesTotalVolume","socket","connectSocket","io","path","emit","on","array","forEach","stock","ticker","obj","item","exchange","company","stock_s","stock_exchange","close","checked","disconnectSocket","stock_name","target","getAttribute","exchange_name","updateStock","stockShowingName","currentExchangeSellVolume","currentExchangeBuyVolume","currentExchangeMarketShare","Container","textAlign","onChange","toggleSwitch","marginBottom","onStockClick","quote_base","alignItems","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e32e4ba.chunk.js","sourcesContent":["import React from 'react';\nimport { Collapse } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronRight, faChevronDown } from '@fortawesome/free-solid-svg-icons'\n\nimport './ExchangeList.css';\n\nclass Exchange extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state =  { isOpen: false };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({ isOpen: !this.state.isOpen });\n    this.forceUpdate();\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const differentData = this.props.data !== nextProps.data;\n    return differentData;\n  }\n\n  render() {\n    return (\n      <div className=\"Exchange\">\n      <div className=\"collapseButton\" onClick={this.toggle}>\n        <span color=\"primary\">{this.props.data.exchange_ticker} </span>\n        { this.state.isOpen ?\n          <FontAwesomeIcon icon={faChevronDown} />\n          :\n          <FontAwesomeIcon icon={faChevronRight} />\n        }\n      </div>\n      <Collapse isOpen={this.state.isOpen}>\n        <div>\n          <ul>\n          { this.props.data.listed_companies.map((comp, i) =>\n              <li key={i}\n                  onClick={this.props.clickAction}\n                  stockname={comp}\n                  exchangename={this.props.data.exchange_ticker}>\n                {comp}\n              </li>\n            )\n          }\n          </ul>\n        </div>\n      </Collapse>\n      </div>\n    );\n  }\n}\n\nexport class ExchangeList extends React.Component {\n\n  render() {\n    return (\n      <div className=\"ExchangeList\">\n        { Object.keys(this.props.exchanges).map((k, i) => {\n            return <Exchange key={i} data={this.props.exchanges[k]} clickAction={this.props.clickAction}/>\n          })\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { createChart } from 'lightweight-charts';\n\nimport './StockChart.css';\n\n\nexport class StockChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chart = null;\n    this.lineSeries = null;\n\n    this.chartContainer = React.createRef();\n    this.chartTooltip = React.createRef();\n  }\n\n  componentDidMount() {\n    // Generate chart\n    this.chart = createChart(document.getElementById(\"AppChart\"),\n                              { width: 600,\n                                height: 350,\n                              \tpriceScale: {\n                              \t\tscaleMargins: {\n                              \t\t\ttop: 0.3,\n                              \t\t\tbottom: 0.25,\n                              \t\t},\n                              \t\tborderVisible: false,\n                              \t},\n                              \tlayout: {\n                              \t\tbackgroundColor: '#131722',\n                              \t\ttextColor: '#d1d4dc',\n                              \t},\n                              \tgrid: {\n                              \t\tvertLines: {\n                              \t\t\tcolor: 'rgba(42, 46, 57, 0)',\n                              \t\t},\n                              \t\thorzLines: {\n                              \t\t\tcolor: 'rgba(42, 46, 57, 0.6)',\n                              \t\t},\n                              \t},\n                                timeScale: {\n                                  timeVisible: true,\n                                },\n    });\n    // Initialize empty line series\n    //this.lineSeries = this.chart.addLineSeries([]);\n    this.lineSeries = this.chart.addAreaSeries({\n    \ttopColor: 'rgba(38,198,218, 0.56)',\n    \tbottomColor: 'rgba(38,198,218, 0.04)',\n    \tlineColor: 'rgba(38,198,218, 1)',\n    \tlineWidth: 2,\n    });\n\n    window.addEventListener('resize', (event) => {\n      this.chart.resize(document.getElementById(\"AppChart\").clientWidth, 350);\n    });\n\n    this.chart.resize(document.getElementById(\"AppChart\").clientWidth, 350);\n\n    const toolTipWidth = 120;\n    const toolTipHeight = 100;\n    const toolTipMargin = 15;\n    const width = 600;\n    const height = 300;\n\n    let tooltip = document.getElementById(\"AppChartTooltip\");\n    // update tooltip\n    this.chart.subscribeCrosshairMove((param) => {\n    \tif (!param.time || param.point.x < 0 || param.point.x > width || param.point.y < 0 || param.point.y > height) {\n    \t\ttooltip.style.display = 'none';\n    \t\treturn;\n    \t}\n\n    \tvar dateStr = new Date(param.time).toLocaleDateString();\n\n    \ttooltip.style.display = 'block';\n    \tvar price = param.seriesPrices.get(this.lineSeries);\n\n    \t//tooltip.innerHTML = '<div style=\"color: rgba(255, 70, 70, 1)\">Apple Inc.</div>' +\n    \t//\t'<div style=\"font-size: 24px; margin: 4px 0px\">' + Math.round(price * 100) / 100 + '</div>' +\n    \t//\t'<div>' + dateStr + '</div>';\n\n    \ttooltip.innerHTML = '<div style=\"font-size: 24px; margin: 4px 0px\">' + Math.round(price * 100) / 100 + '</div>' +\n    \t\t'<div>' + dateStr + '</div>';\n\n    \tvar y = param.point.y;\n\n    \tvar left = param.point.x + toolTipMargin;\n    \tif (left > width - toolTipWidth) {\n    \t\tleft = param.point.x - toolTipMargin - toolTipWidth;\n    \t}\n\n    \tvar top = y + toolTipMargin;\n    \tif (top > height - toolTipHeight) {\n    \t\ttop = y - toolTipHeight - toolTipMargin;\n    \t}\n\n    \ttooltip.style.left = left + 'px';\n    \ttooltip.style.top = top + 'px';\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this.updateChart(nextProps.data)\n    }\n    return false;\n  }\n\n  updateChart(data_price){\n    this.lineSeries.setData(data_price);\n    //this.chart.timeScale().applyOptions({\n    //  rightOffset: data_price[0].time,\n    //});\n  }\n\n  businessDayToString(businessDay) {\n    return businessDay.year + '-' + businessDay.month + '-' + businessDay.day;\n  }\n\n  render() {\n    return (\n      <div ref={this.chartContainer} id=\"AppChart\" className=\"AppChart\">\n        <div ref={this.chartTooltip} id=\"AppChartTooltip\" className=\"floating-tooltip-2\"></div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './StockInfo.css';\nimport { Row, Col } from 'reactstrap';\n\nexport class StockInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.transactions = [];\n  }\n\n  // https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n  timeConverter(UNIX_timestamp){\n    const a = new Date(UNIX_timestamp);\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    //const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n    const time = this.strPad(hour) + ':' + this.strPad(min) + ':' + this.strPad(sec) ;\n    return time;\n  }\n\n  strPad(n) {\n    return String(\"00\" + n).slice(-2);\n  }\n\n  render() {\n    let sell_data = this.props.data_sell;\n    let buy_data = this.props.data_buy;\n    let price_data = this.props.data_price;\n    if (typeof(sell_data) === \"undefined\") sell_data = [];\n    if (typeof(buy_data) === \"undefined\") buy_data = [];\n    if (typeof(price_data) === \"undefined\") price_data = [];\n    price_data = price_data.map((o) => o.value);\n\n    let transactions = sell_data.map((o) => {o.type=\"sell\"; return o}).concat(\n                       buy_data.map((o) => {o.type=\"buy\"; return o}));\n    transactions.sort((a,b) => b.time - a.time );\n\n    // Information\n    const totalSellVolume = sell_data.reduce((t,n) => (t + n.volume), 0);\n    const totalBuyVolume = buy_data.reduce((t,n) => (t + n.volume), 0);\n    const maxPrice = Math.max(...price_data);\n    const minPrice = Math.min(...price_data);\n    const currentPrice = price_data[price_data.length - 1];\n    const previousPrice = price_data[price_data.length - 2] || 0;\n    const variation = ((currentPrice - previousPrice) / previousPrice).toFixed(2);\n\n    return (\n      <Row>\n        <Col xs=\"12\" md=\"12\" lg=\"6\">\n          <div className=\"StockData\">\n            <table>\n              <tbody>\n              <tr>\n                <th>Volume:</th>\n                <td>{totalSellVolume + totalBuyVolume}</td>\n              </tr>\n              <tr>\n                <th>High:</th>\n                <td>{maxPrice}</td>\n              </tr>\n              <tr>\n                <th>Low:</th>\n                <td>{minPrice}</td>\n              </tr>\n              <tr>\n                <th>Last Price:</th>\n                <td>{currentPrice}</td>\n              </tr>\n              <tr>\n                <th>Variation:</th>\n                <td>{variation}%</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n        </Col>\n        <Col xs=\"12\" md=\"12\" lg=\"6\">\n        <div className=\"StockTradesData\">\n          <table>\n            <thead>\n              <tr>\n                <th>Time</th>\n                <th>Volume</th>\n              </tr>\n            </thead>\n            <tbody>\n            { transactions.map((o, i) => {\n                if (o.type === \"buy\") {\n                  return (\n                    <tr key={i} className=\"buyOrder\">\n                      <td>{this.timeConverter(o.time)}</td>\n                      <td>{o.volume}</td>\n                    </tr>\n                  );\n                } else {\n                  return (\n                    <tr key={i} className=\"sellOrder\">\n                      <td>{this.timeConverter(o.time)}</td>\n                      <td>{o.volume}</td>\n                    </tr>\n                  );\n                }\n              })\n            }\n            </tbody>\n\n          </table>\n        </div>\n        </Col>\n      </Row>\n\n    );\n  }\n}\n","import React from 'react';\nimport './ExchangeInfo.css';\nimport { Row, Col } from 'reactstrap';\n\nexport class ExchangeInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.transactions = [];\n  }\n\n  render() {\n    return (\n      <Row style={{backgroundColor: \"#182733\"}}>\n        <Col xs=\"12\">\n          <div className=\"ExchangeData\">\n            <h6>{this.props.exchangeData.exchange_ticker} - {this.props.exchangeData.name}</h6>\n            <p>{this.props.exchangeData.address}, {this.props.exchangeData.country}</p>\n            <table>\n              <thead>\n                <tr>\n                  <th>Buy Volume</th>\n                  <th>Sell Volume</th>\n                  <th>Total Volume</th>\n                  <th># Stocks</th>\n                  <th>Market Share</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>{this.props.buyVolume}</td>\n                  <td>{this.props.sellVolume}</td>\n                  <td>{this.props.sellVolume + this.props.buyVolume}</td>\n                  <td>{this.props.exchangeData.listed_companies.length}</td>\n                  <td>{this.props.marketShare}%</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </Col>\n      </Row>\n\n    );\n  }\n}\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport { createChart } from 'lightweight-charts';\nimport io from \"socket.io-client\";\n\n// Components\nimport { Container, Row, Col } from 'reactstrap';\nimport { ExchangeList }  from './components/ExchangeList';\nimport { StockChart }  from './components/StockChart';\nimport { StockInfo }  from './components/StockInfo';\nimport { ExchangeInfo }  from './components/ExchangeInfo';\nimport Switch from 'react-switch';\n\n// Utils\nimport { convertArrayToObject } from './utils.js';\n\nconst ENDPOINT = \"wss://le-18262636.bitzonte.com\";\nconst PATH = \"/stocks\";\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state =  { data: 0,\n                    stocks: [],\n                    exchanges: [],\n                    stockShow: \"\",\n                    connected: true,\n                    stockShowing: \"AAPL\",\n                    exchangeShowing: \"\",\n                    exchangesTotalVolume: 0\n                  };\n\n    this.socket = null;\n  }\n\n  componentDidMount() {\n    this.connectSocket();\n  }\n\n  connectSocket() {\n    this.socket = io(ENDPOINT, { path: PATH });\n\n    this.socket.emit('STOCKS');\n    this.socket.on('STOCKS', (stocks) => {\n      stocks.forEach((stock) => {\n        if (typeof this.state[\"stock_\" + stock.ticker] === \"undefined\") {\n          this.setState({ [\"stock_\" + stock.ticker]: [],\n                          [\"stock_buy_\" + stock.ticker]: [],\n                          [\"stock_sell_\" + stock.ticker]: []\n          });\n        }\n      });\n      this.setState({ stocks: convertArrayToObject(stocks,\"company_name\") });\n      this.socket.emit('EXCHANGES');\n    });\n\n    this.socket.on('EXCHANGES', (exchanges) => {\n      this.setState({ exchanges: exchanges });\n      for (const k in exchanges) {\n        const exchange = exchanges[k];\n        if (typeof this.state[\"exchange_buy_\" + exchange.exchange_ticker] === \"undefined\") {\n          this.setState({ [\"exchange_buy_\" + exchange.exchange_ticker]: 0,\n                          [\"exchange_sell_\" + exchange.exchange_ticker]: 0\n          });\n        }\n        exchange.listed_companies.forEach((company) => {\n          this.setState({ [\"stock_\"+this.state.stocks[company].ticker+\"_exchange\"]: exchange.exchange_ticker });\n        });\n      }\n\n      this.socket.on('UPDATE', (data) => {\n        const stock_s = \"stock_\" + data.ticker;\n        this.setState({ [stock_s]: [...this.state[stock_s],{time: data.time, value: data.value}] });\n      });\n      this.socket.on('BUY', (data) => {\n        const stock_s = \"stock_buy_\" + data.ticker;\n        const stock_exchange = this.state[\"stock_\"+data.ticker+\"_exchange\"];\n        this.setState({ [stock_s]: [...this.state[stock_s],{time: data.time, volume: data.volume}],\n                        [\"exchange_buy_\"+stock_exchange]: this.state[\"exchange_buy_\"+stock_exchange] + data.volume,\n                        exchangesTotalVolume: this.state.exchangesTotalVolume + data.volume});\n      });\n      this.socket.on('SELL', (data) => {\n        const stock_s = \"stock_sell_\" + data.ticker;\n        const stock_exchange = this.state[\"stock_\"+data.ticker+\"_exchange\"];\n        this.setState({ [stock_s]: [...this.state[stock_s],{time: data.time, volume: data.volume}],\n                        [\"exchange_sell_\"+stock_exchange]: this.state[\"exchange_sell_\"+stock_exchange] + data.volume,\n                        exchangesTotalVolume: this.state.exchangesTotalVolume + data.volume});\n      });\n\n      //if (this.state.stockShowing === \"\") this.setState({stockShowing: });\n      //if (this.state.exchangeShowing === \"\") this.setState({exchangeShowing: });\n    });\n  }\n\n  disconnectSocket() {\n    this.socket.close();\n  }\n\n  toggleSwitch(checked) {\n    const prev_state = this.state.connected;\n    if (!prev_state) {\n      this.connectSocket();\n    } else {\n      this.disconnectSocket();\n    }\n    this.setState({ connected: checked });\n  };\n\n  onStockClick(event) {\n    // Change chart and current stock info\n    const stock_name = event.target.getAttribute(\"stockname\");\n    const exchange_name = event.target.getAttribute(\"exchangename\");\n    this.updateStock(stock_name, exchange_name);\n\n  }\n\n  updateStock(stock_name, exchange_name) {\n    this.setState({ stockShowing: this.state.stocks[stock_name].ticker,\n                    stockShowingName: stock_name,\n                    exchangeShowing: exchange_name\n    });\n  }\n\n  render() {\n    let currentExchangeSellVolume, currentExchangeBuyVolume,\n        currentExchangeTotalVolume, currentExchangeMarketShare;\n\n    if (this.state.exchangeShowing) {\n      currentExchangeSellVolume = this.state[\"exchange_sell_\"+this.state.exchangeShowing];\n      currentExchangeBuyVolume = this.state[\"exchange_buy_\"+this.state.exchangeShowing];\n      currentExchangeTotalVolume = currentExchangeSellVolume + currentExchangeBuyVolume;\n      currentExchangeMarketShare = ((currentExchangeTotalVolume / this.state.exchangesTotalVolume) * 100).toFixed(2);\n    }\n\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row>\n            <Col md=\"12\" style={{textAlign: \"left\"}}>\n              <label>\n                <span style={{color: \"white\"}}>Connected </span>\n                <Switch onChange={this.toggleSwitch.bind(this)}\n                        checked={this.state.connected}\n                        className=\"connection-switch\" />\n              </label>\n            </Col>\n          </Row>\n          <Row style={{marginBottom: \"0px\"}}>\n            <Col xs=\"12\" md=\"3\">\n              <ExchangeList exchanges={this.state.exchanges}\n                            clickAction={this.onStockClick.bind(this)} />\n            </Col>\n            { (this.state.stockShowing && this.state.exchangeShowing) ?\n            <Col xs=\"12\" md=\"9\">\n              <ExchangeInfo sellVolume={currentExchangeSellVolume}\n                            buyVolume={currentExchangeBuyVolume}\n                            marketShare={currentExchangeMarketShare}\n                            exchangeData={this.state.exchanges[this.state.exchangeShowing]} />\n              <Row>\n                <Col md=\"12\">\n                  <div className=\"stockName\">\n                    <h1>{this.state.stockShowing} - {this.state.stockShowingName}</h1>\n                    <p>{this.state.stocks[this.state.stockShowingName].country}</p>\n                    <p>{this.state.stocks[this.state.stockShowingName].quote_base}</p>\n                  </div>\n                </Col>\n                <Col md=\"12\">\n                  <StockChart stock={this.state.stockShowing}\n                              data={this.state[\"stock_\" + this.state.stockShowing]} />\n                </Col>\n              </Row>\n              <StockInfo data_sell={this.state[\"stock_sell_\" + this.state.stockShowing]}\n                         data_buy={this.state[\"stock_buy_\" + this.state.stockShowing]}\n                         data_price={this.state[\"stock_\" + this.state.stockShowing]} />\n            </Col>\n            :\n            <Col xs=\"12\"\n                 md=\"9\"\n                 style={{height:\"80vh\", display:\"flex\", alignItems:\"center\"}}>\n              <h4 style={{width:\"100%\"}}>Select a stock...</h4>\n            </Col>\n            }\n          </Row>\n\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\n// https://dev.to/afewminutesofcode/how-to-convert-an-array-into-an-object-in-javascript-25a4\nexport const convertArrayToObject = (array, key) => {\n  const initialValue = {};\n  return array.reduce((obj, item) => {\n    return {\n      ...obj,\n      [item[key]]: item,\n    };\n  }, initialValue);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
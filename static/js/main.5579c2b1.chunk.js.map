{"version":3,"sources":["components/ExchangeList.js","components/StockChart.js","components/StockInfo.js","components/ExchangeInfo.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["Exchange","props","state","isOpen","toggle","bind","this","setState","forceUpdate","nextProps","data","className","onClick","color","exchange_ticker","icon","faChevronDown","faChevronRight","Collapse","listed_companies","map","comp","i","key","clickAction","stockname","exchangename","React","Component","ExchangeList","Object","keys","exchanges","k","StockChart","chart","lineSeries","chartContainer","createRef","chartTooltip","createChart","document","getElementById","width","height","fixLeftEdge","crosshair","labelVisible","visible","localization","locale","dateFormat","timeFormatter","timestamp","a","Date","hour","getHours","min","getMinutes","sec","getSeconds","String","slice","priceScale","scaleMargins","top","bottom","borderVisible","layout","backgroundColor","textColor","grid","vertLines","horzLines","timeScale","timeVisible","addAreaSeries","topColor","bottomColor","lineColor","lineWidth","applyOptions","window","addEventListener","event","resize","clientWidth","tooltip","subscribeCrosshairMove","param","time","point","x","y","style","display","dateStr","datetimeConverter","price","seriesPrices","get","innerHTML","Math","round","left","updateChart","data_price","setData","rightOffset","businessDay","year","month","day","UNIX_timestamp","getFullYear","getMonth","date","getDate","strPad","n","ref","id","StockInfo","transactions","sell_data","data_sell","buy_data","data_buy","price_data","o","value","type","concat","sort","b","totalSellVolume","reduce","t","volume","totalBuyVolume","maxPrice","max","minPrice","currentPrice","length","previousPrice","variation","toFixed","Row","Col","xs","md","lg","timeConverter","ExchangeInfo","exchangeData","name","address","country","buyVolume","sellVolume","marketShare","App","stocks","stockShow","connected","stockShowing","exchangeShowing","exchangesTotalVolume","socket","connectSocket","io","path","emit","on","array","forEach","stock","ticker","obj","item","exchange","company","stock_s","stock_exchange","close","checked","disconnectSocket","stock_name","target","getAttribute","exchange_name","updateStock","stockShowingName","currentExchangeSellVolume","currentExchangeBuyVolume","currentExchangeMarketShare","Container","textAlign","onChange","toggleSwitch","marginBottom","size","loading","onStockClick","quote_base","alignItems","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5579c2b1.chunk.js","sourcesContent":["import React from 'react';\nimport { Collapse } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronRight, faChevronDown } from '@fortawesome/free-solid-svg-icons'\n\nimport './ExchangeList.css';\n\nclass Exchange extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state =  { isOpen: this.props.isOpen };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({ isOpen: !this.state.isOpen });\n    this.forceUpdate();\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const differentData = this.props.data !== nextProps.data;\n    return differentData;\n  }\n\n  render() {\n    return (\n      <div className=\"Exchange\">\n      <div className=\"collapseButton\" onClick={this.toggle}>\n        <span color=\"primary\">{this.props.data.exchange_ticker} </span>\n        { this.state.isOpen ?\n          <FontAwesomeIcon icon={faChevronDown} />\n          :\n          <FontAwesomeIcon icon={faChevronRight} />\n        }\n      </div>\n      <Collapse isOpen={this.state.isOpen}>\n        <div>\n          <ul>\n          { this.props.data.listed_companies.map((comp, i) =>\n              <li key={i}\n                  onClick={this.props.clickAction}\n                  stockname={comp}\n                  exchangename={this.props.data.exchange_ticker}>\n                {comp}\n              </li>\n            )\n          }\n          </ul>\n        </div>\n      </Collapse>\n      </div>\n    );\n  }\n}\n\nexport class ExchangeList extends React.Component {\n\n  render() {\n    return (\n      <div className=\"ExchangeList\">\n        { Object.keys(this.props.exchanges).map((k, i) => {\n            return <Exchange key={i}\n                             data={this.props.exchanges[k]}\n                             clickAction={this.props.clickAction}\n                             isOpen={(i === 0)? true : false}/>\n          })\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { createChart } from 'lightweight-charts';\n\nimport './StockChart.css';\n\n\nexport class StockChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chart = null;\n    this.lineSeries = null;\n\n    this.chartContainer = React.createRef();\n    this.chartTooltip = React.createRef();\n  }\n\n  componentDidMount() {\n    // Generate chart\n    this.chart = createChart(document.getElementById(\"AppChart\"),\n                              { width: 600,\n                                height: 350,\n                                fixLeftEdge: true,\n                                crosshair: {\n                                  labelVisible: false,\n                                  visible: false,\n                                },\n                                localization: {\n                                  locale: 'es-CL',\n                                  dateFormat: 'dd/mm/yyyy',\n                                  timeFormatter: function(timestamp) {\n                                    const a = new Date(timestamp*1000);\n                                    const hour = a.getHours();\n                                    const min = a.getMinutes();\n                                    const sec = a.getSeconds();\n                                    const time = String(\"00\" + hour).slice(-2) + ':' + String(\"00\" + min).slice(-2) + ':' + String(\"00\" + sec).slice(-2) ;\n                                    return time;\n                                  },\n                                },\n                              \tpriceScale: {\n                              \t\tscaleMargins: {\n                              \t\t\ttop: 0.3,\n                              \t\t\tbottom: 0.25,\n                              \t\t},\n                              \t\tborderVisible: false,\n                              \t},\n                              \tlayout: {\n                              \t\tbackgroundColor: '#131722',\n                              \t\ttextColor: '#d1d4dc',\n                              \t},\n                              \tgrid: {\n                              \t\tvertLines: {\n                              \t\t\tcolor: 'rgba(42, 46, 57, 0)',\n                              \t\t},\n                              \t\thorzLines: {\n                              \t\t\tcolor: 'rgba(42, 46, 57, 0.6)',\n                              \t\t},\n                              \t},\n                                timeScale: {\n                                  timeVisible: true,\n                                  visible: false,\n                                },\n    });\n    // Initialize empty line series\n    //this.lineSeries = this.chart.addLineSeries([]);\n    this.lineSeries = this.chart.addAreaSeries({\n    \ttopColor: 'rgba(38,198,218, 0.56)',\n    \tbottomColor: 'rgba(38,198,218, 0.04)',\n    \tlineColor: 'rgba(38,198,218, 1)',\n    \tlineWidth: 2,\n    });\n    this.chart.timeScale().applyOptions({ fixLeftEdge: true,\n                                          crosshair: {\n                                            labelVisible: false,\n                                            visible: false,\n                                          },\n                                          timeScale: {\n                                            timeVisible: true,\n                                            visible: false\n                                          },\n                                        });\n\n    window.addEventListener('resize', (event) => {\n      this.chart.resize(document.getElementById(\"AppChart\").clientWidth, 350);\n    });\n\n    this.chart.resize(document.getElementById(\"AppChart\").clientWidth, 350);\n\n    const toolTipWidth = 120;\n    const toolTipHeight = 100;\n    const toolTipMargin = 15;\n    const width = 600;\n    const height = 300;\n\n    let tooltip = document.getElementById(\"AppChartTooltip\");\n    // update tooltip\n    this.chart.subscribeCrosshairMove((param) => {\n    \tif (!param.time || param.point.x < 0 || param.point.x > width || param.point.y < 0 || param.point.y > height) {\n    \t\ttooltip.style.display = 'none';\n    \t\treturn;\n    \t}\n\n    \tvar dateStr = this.datetimeConverter(param.time*1000);\n\n    \ttooltip.style.display = 'block';\n    \tvar price = param.seriesPrices.get(this.lineSeries);\n\n    \t//tooltip.innerHTML = '<div style=\"color: rgba(255, 70, 70, 1)\">Apple Inc.</div>' +\n    \t//\t'<div style=\"font-size: 24px; margin: 4px 0px\">' + Math.round(price * 100) / 100 + '</div>' +\n    \t//\t'<div>' + dateStr + '</div>';\n\n    \ttooltip.innerHTML = '<div style=\"font-size: 24px; margin: 4px 0px\">' + Math.round(price * 100) / 100 + '</div>' +\n    \t\t'<div>' + dateStr + '</div>';\n\n    \tvar y = param.point.y;\n\n    \tvar left = param.point.x + toolTipMargin;\n    \tif (left > width - toolTipWidth) {\n    \t\tleft = param.point.x - toolTipMargin - toolTipWidth;\n    \t}\n\n    \tvar top = y + toolTipMargin;\n    \tif (top > height - toolTipHeight) {\n    \t\ttop = y - toolTipHeight - toolTipMargin;\n    \t}\n\n    \ttooltip.style.left = left + 'px';\n    \ttooltip.style.top = top + 'px';\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this.updateChart(nextProps.data)\n    }\n    return false;\n  }\n\n  updateChart(data_price){\n    this.lineSeries.setData(data_price);\n    this.chart.timeScale().applyOptions({ rightOffset: 12 });\n    //this.chart.timeScale().applyOptions({\n    //  rightOffset: data_price[0].time,\n    //});\n  }\n\n  businessDayToString(businessDay) {\n    return businessDay.year + '-' + businessDay.month + '-' + businessDay.day;\n  }\n\n  // https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n  datetimeConverter(UNIX_timestamp){\n    const a = new Date(UNIX_timestamp);\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const datetime = date + ' ' + month + ' ' + year + ' ' + this.strPad(hour) + ':' + this.strPad(min) + ':' + this.strPad(sec) ;\n    return datetime;\n  }\n\n  strPad(n) {\n    return String(\"00\" + n).slice(-2);\n  }\n\n  render() {\n    return (\n      <div ref={this.chartContainer} id=\"AppChart\" className=\"AppChart\">\n        <div ref={this.chartTooltip} id=\"AppChartTooltip\" className=\"floating-tooltip-2\"></div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './StockInfo.css';\nimport { Row, Col } from 'reactstrap';\n\nexport class StockInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.transactions = [];\n  }\n\n  // https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n  timeConverter(UNIX_timestamp){\n    const a = new Date(UNIX_timestamp);\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    //const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n    const time = this.strPad(hour) + ':' + this.strPad(min) + ':' + this.strPad(sec) ;\n    return time;\n  }\n\n  strPad(n) {\n    return String(\"00\" + n).slice(-2);\n  }\n\n  render() {\n    let sell_data = this.props.data_sell;\n    let buy_data = this.props.data_buy;\n    let price_data = this.props.data_price;\n    if (typeof(sell_data) === \"undefined\") sell_data = [];\n    if (typeof(buy_data) === \"undefined\") buy_data = [];\n    if (typeof(price_data) === \"undefined\") price_data = [];\n    price_data = price_data.map((o) => o.value);\n\n    let transactions = sell_data.map((o) => {o.type=\"sell\"; return o}).concat(\n                       buy_data.map((o) => {o.type=\"buy\"; return o}));\n    transactions.sort((a,b) => b.time - a.time );\n\n    // Information\n    const totalSellVolume = sell_data.reduce((t,n) => (t + n.volume), 0);\n    const totalBuyVolume = buy_data.reduce((t,n) => (t + n.volume), 0);\n    const maxPrice = Math.max(...price_data);\n    const minPrice = Math.min(...price_data);\n    const currentPrice = price_data[price_data.length - 1];\n    const previousPrice = price_data[price_data.length - 2] || 0;\n    const variation = ((currentPrice - previousPrice) / previousPrice).toFixed(2);\n\n    return (\n      <Row>\n        <Col xs=\"12\" md=\"12\" lg=\"6\">\n          <div className=\"StockData\">\n            <table>\n              <tbody>\n              <tr>\n                <th>Volume:</th>\n                <td>{totalSellVolume + totalBuyVolume}</td>\n              </tr>\n              <tr>\n                <th>High:</th>\n                <td>{maxPrice}</td>\n              </tr>\n              <tr>\n                <th>Low:</th>\n                <td>{minPrice}</td>\n              </tr>\n              <tr>\n                <th>Last Price:</th>\n                <td>{currentPrice}</td>\n              </tr>\n              <tr>\n                <th>Variation:</th>\n                <td>{variation}%</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n        </Col>\n        <Col xs=\"12\" md=\"12\" lg=\"6\">\n        <div className=\"StockTradesData\">\n          <table>\n            <thead>\n              <tr>\n                <th>Time</th>\n                <th>Volume</th>\n              </tr>\n            </thead>\n            <tbody>\n            { transactions.map((o, i) => {\n                if (o.type === \"buy\") {\n                  return (\n                    <tr key={i} className=\"buyOrder\">\n                      <td>{this.timeConverter(o.time)}</td>\n                      <td>{o.volume}</td>\n                    </tr>\n                  );\n                } else {\n                  return (\n                    <tr key={i} className=\"sellOrder\">\n                      <td>{this.timeConverter(o.time)}</td>\n                      <td>{o.volume}</td>\n                    </tr>\n                  );\n                }\n              })\n            }\n            </tbody>\n\n          </table>\n        </div>\n        </Col>\n      </Row>\n\n    );\n  }\n}\n","import React from 'react';\nimport './ExchangeInfo.css';\nimport { Row, Col } from 'reactstrap';\n\nexport class ExchangeInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.transactions = [];\n  }\n\n  render() {\n    return (\n      <Row style={{backgroundColor: \"#182733\"}}>\n        <Col xs=\"12\">\n          <div className=\"ExchangeData\">\n            <h6>{this.props.exchangeData.exchange_ticker} - {this.props.exchangeData.name}</h6>\n            <p>{this.props.exchangeData.address}, {this.props.exchangeData.country}</p>\n            <table>\n              <thead>\n                <tr>\n                  <th>Buy Volume</th>\n                  <th>Sell Volume</th>\n                  <th>Total Volume</th>\n                  <th># Stocks</th>\n                  <th>Market Share</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>{this.props.buyVolume}</td>\n                  <td>{this.props.sellVolume}</td>\n                  <td>{this.props.sellVolume + this.props.buyVolume}</td>\n                  <td>{this.props.exchangeData.listed_companies.length}</td>\n                  <td>{this.props.marketShare}%</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </Col>\n      </Row>\n\n    );\n  }\n}\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport { createChart } from 'lightweight-charts';\nimport io from \"socket.io-client\";\n\n// Components\nimport { Container, Row, Col } from 'reactstrap';\nimport { ExchangeList }  from './components/ExchangeList';\nimport { StockChart }  from './components/StockChart';\nimport { StockInfo }  from './components/StockInfo';\nimport { ExchangeInfo }  from './components/ExchangeInfo';\nimport Switch from 'react-switch';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\n// Utils\nimport { convertArrayToObject } from './utils.js';\n\nconst ENDPOINT = \"wss://le-18262636.bitzonte.com\";\nconst PATH = \"/stocks\";\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state =  { data: 0,\n                    stocks: [],\n                    exchanges: [],\n                    stockShow: \"\",\n                    connected: true,\n                    stockShowing: \"AAPL\",\n                    exchangeShowing: \"\",\n                    exchangesTotalVolume: 0\n                  };\n\n    this.socket = null;\n  }\n\n  componentDidMount() {\n    this.connectSocket();\n  }\n\n  connectSocket() {\n    this.socket = io(ENDPOINT, { path: PATH });\n\n    this.socket.emit('STOCKS');\n    this.socket.on('STOCKS', (stocks) => {\n      stocks.forEach((stock) => {\n        if (typeof this.state[\"stock_\" + stock.ticker] === \"undefined\") {\n          this.setState({ [\"stock_\" + stock.ticker]: [],\n                          [\"stock_buy_\" + stock.ticker]: [],\n                          [\"stock_sell_\" + stock.ticker]: []\n          });\n        }\n      });\n      this.setState({ stocks: convertArrayToObject(stocks,\"company_name\") });\n      this.socket.emit('EXCHANGES');\n    });\n\n    this.socket.on('EXCHANGES', (exchanges) => {\n      this.setState({ exchanges: exchanges });\n      for (const k in exchanges) {\n        const exchange = exchanges[k];\n        if (typeof this.state[\"exchange_buy_\" + exchange.exchange_ticker] === \"undefined\") {\n          this.setState({ [\"exchange_buy_\" + exchange.exchange_ticker]: 0,\n                          [\"exchange_sell_\" + exchange.exchange_ticker]: 0\n          });\n        }\n        exchange.listed_companies.forEach((company) => {\n          this.setState({ [\"stock_\"+this.state.stocks[company].ticker+\"_exchange\"]: exchange.exchange_ticker });\n        });\n      }\n\n      this.socket.on('UPDATE', (data) => {\n        const stock_s = \"stock_\" + data.ticker;\n        this.setState({ [stock_s]: [...this.state[stock_s],{time: data.time/1000, value: data.value}] });\n      });\n      this.socket.on('BUY', (data) => {\n        const stock_s = \"stock_buy_\" + data.ticker;\n        const stock_exchange = this.state[\"stock_\"+data.ticker+\"_exchange\"];\n        this.setState({ [stock_s]: [...this.state[stock_s],{time: data.time, volume: data.volume}],\n                        [\"exchange_buy_\"+stock_exchange]: this.state[\"exchange_buy_\"+stock_exchange] + data.volume,\n                        exchangesTotalVolume: this.state.exchangesTotalVolume + data.volume});\n      });\n      this.socket.on('SELL', (data) => {\n        const stock_s = \"stock_sell_\" + data.ticker;\n        const stock_exchange = this.state[\"stock_\"+data.ticker+\"_exchange\"];\n        this.setState({ [stock_s]: [...this.state[stock_s],{time: data.time, volume: data.volume}],\n                        [\"exchange_sell_\"+stock_exchange]: this.state[\"exchange_sell_\"+stock_exchange] + data.volume,\n                        exchangesTotalVolume: this.state.exchangesTotalVolume + data.volume});\n      });\n\n      //if (this.state.stockShowing === \"\") this.setState({stockShowing: });\n      //if (this.state.exchangeShowing === \"\") this.setState({exchangeShowing: });\n    });\n  }\n\n  disconnectSocket() {\n    this.socket.close();\n  }\n\n  toggleSwitch(checked) {\n    const prev_state = this.state.connected;\n    if (!prev_state) {\n      this.connectSocket();\n    } else {\n      this.disconnectSocket();\n    }\n    this.setState({ connected: checked });\n  };\n\n  onStockClick(event) {\n    // Change chart and current stock info\n    const stock_name = event.target.getAttribute(\"stockname\");\n    const exchange_name = event.target.getAttribute(\"exchangename\");\n    this.updateStock(stock_name, exchange_name);\n\n  }\n\n  updateStock(stock_name, exchange_name) {\n    this.setState({ stockShowing: this.state.stocks[stock_name].ticker,\n                    stockShowingName: stock_name,\n                    exchangeShowing: exchange_name\n    });\n  }\n\n  render() {\n    let currentExchangeSellVolume, currentExchangeBuyVolume,\n        currentExchangeTotalVolume, currentExchangeMarketShare;\n\n    if (this.state.exchangeShowing) {\n      currentExchangeSellVolume = this.state[\"exchange_sell_\"+this.state.exchangeShowing];\n      currentExchangeBuyVolume = this.state[\"exchange_buy_\"+this.state.exchangeShowing];\n      currentExchangeTotalVolume = currentExchangeSellVolume + currentExchangeBuyVolume;\n      currentExchangeMarketShare = ((currentExchangeTotalVolume / this.state.exchangesTotalVolume) * 100).toFixed(2);\n    }\n\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row>\n            <Col md=\"12\" style={{textAlign: \"left\"}}>\n              <label>\n                <span style={{color: \"white\"}}>Connected </span>\n                <Switch onChange={this.toggleSwitch.bind(this)}\n                        checked={this.state.connected}\n                        className=\"connection-switch\" />\n              </label>\n            </Col>\n          </Row>\n          <Row style={{marginBottom: \"0px\"}}>\n            <Col xs=\"12\" md=\"3\">\n              <ClipLoader\n                size={80}\n                color={\"rgba(38,198,218, 0.56)\"}\n                loading={(this.state.exchanges.length === 0)}\n              />\n              <ExchangeList exchanges={this.state.exchanges}\n                            clickAction={this.onStockClick.bind(this)} />\n            </Col>\n            { (this.state.stockShowing && this.state.exchangeShowing) ?\n            <Col xs=\"12\" md=\"9\">\n              <ExchangeInfo sellVolume={currentExchangeSellVolume}\n                            buyVolume={currentExchangeBuyVolume}\n                            marketShare={currentExchangeMarketShare}\n                            exchangeData={this.state.exchanges[this.state.exchangeShowing]} />\n              <Row>\n                <Col md=\"12\">\n                  <div className=\"stockName\">\n                    <h1>{this.state.stockShowing}</h1>\n                    <p>{this.state.stockShowingName}</p>\n                    <p>{this.state.stocks[this.state.stockShowingName].country} - {this.state.stocks[this.state.stockShowingName].quote_base}</p>\n                  </div>\n                </Col>\n                <Col md=\"12\">\n                  <StockChart stock={this.state.stockShowing}\n                              data={this.state[\"stock_\" + this.state.stockShowing]} />\n                </Col>\n              </Row>\n              <StockInfo data_sell={this.state[\"stock_sell_\" + this.state.stockShowing]}\n                         data_buy={this.state[\"stock_buy_\" + this.state.stockShowing]}\n                         data_price={this.state[\"stock_\" + this.state.stockShowing]} />\n            </Col>\n            :\n            <Col xs=\"12\"\n                 md=\"9\"\n                 style={{height:\"80vh\", display:\"flex\", alignItems:\"center\"}}>\n              <h4 style={{width:\"100%\"}}>Select a stock...</h4>\n            </Col>\n            }\n          </Row>\n\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\n// https://dev.to/afewminutesofcode/how-to-convert-an-array-into-an-object-in-javascript-25a4\nexport const convertArrayToObject = (array, key) => {\n  const initialValue = {};\n  return array.reduce((obj, item) => {\n    return {\n      ...obj,\n      [item[key]]: item,\n    };\n  }, initialValue);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}